{"ast":null,"code":"var _jsxFileName = \"/Users/haiyenhaiyen/Documents/Project/vietnamtravel-material-ui/src/Modules/Views/Article.test.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\nimport Article from \"./Article\";\nlet container;\nbeforeEach(() => {\n  container = document.createElement(\"div\");\n  document.body.appendChild(container);\n});\nafterEach(() => {\n  document.body.removeChild(container);\n  container = null;\n});\nit(\"can render article component from data\", () => {\n  const Data = {\n    type: \"Article\",\n    heading: \"人気の食べ物\",\n    paragraphs: [{\n      image: {\n        src: \"catba10.png\",\n        alt: \"\"\n      },\n      text: \"カブトガニ\"\n    }, {\n      image: {\n        src: \"catba11.jpg\",\n        alt: \"\"\n      },\n      text: \"ジオダック\"\n    }]\n  };\n  act(() => {\n    ReactDOM.render( /*#__PURE__*/React.createElement(Article, {\n      rootImgPath: \"Img/Places/Catba/\",\n      data: Data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 25\n      }\n    }), container);\n  });\n  const h3 = container.querySelector(\"h3\");\n  const imgTags = container.querySelectorAll(\"img\");\n  const pTags = container.querySelectorAll(\"p\");\n  expect(h3.textContent).toBe(Data.heading);\n  expect(pTags.length).toBe(Data.paragraphs.length);\n  expect(imgTags.length).toBe(Data.paragraphs.length);\n  expect(Data.paragraphs[0].image.src).toContain(imgTags[0].getAttribute('src'));\n  expect(Data.paragraphs[1].image.src).toContain(imgTags[1].getAttribute('src'));\n  expect(Data.paragraphs[0].image.alt).toBe(imgTags[0].alt);\n  expect(Data.paragraphs[1].image.alt).toBe(imgTags[1].alt);\n  expect(pTags[0].text).toBe(Data.paragraphs[0].textContent);\n  expect(pTags[1].text).toBe(Data.paragraphs[1].textContent);\n});","map":{"version":3,"sources":["/Users/haiyenhaiyen/Documents/Project/vietnamtravel-material-ui/src/Modules/Views/Article.test.js"],"names":["React","ReactDOM","act","Article","container","beforeEach","document","createElement","body","appendChild","afterEach","removeChild","it","Data","type","heading","paragraphs","image","src","alt","text","render","h3","querySelector","imgTags","querySelectorAll","pTags","expect","textContent","toBe","length","toContain","getAttribute"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\nimport Article from \"./Article\";\n\nlet container;\n\nbeforeEach(() => {\n  container = document.createElement(\"div\");\n  document.body.appendChild(container);\n});\nafterEach(() => {\n    document.body.removeChild(container);\n    container = null;\n  });\n  it(\"can render article component from data\", () => {\n    const Data = {\n        type: \"Article\",\n        heading: \"人気の食べ物\",\n        paragraphs: [\n            {image: {src: \"catba10.png\", alt: \"\"},text: \"カブトガニ\"},\n            {image: {src: \"catba11.jpg\", alt: \"\"},text: \"ジオダック\"}\n              ]\n    };\n    act(() => {\n        ReactDOM.render(<Article rootImgPath={\"Img/Places/Catba/\"} data={Data} />, container);\n      });\n      const h3 = container.querySelector(\"h3\");\n      const imgTags = container.querySelectorAll(\"img\");\n      const pTags = container.querySelectorAll(\"p\");\n    \n      expect(h3.textContent).toBe(Data.heading);\n      expect(pTags.length).toBe(Data.paragraphs.length);\n      expect(imgTags.length).toBe(Data.paragraphs.length);\n      expect(Data.paragraphs[0].image.src).toContain(imgTags[0].getAttribute('src'));\n      expect(Data.paragraphs[1].image.src).toContain(imgTags[1].getAttribute('src'));\n      expect(Data.paragraphs[0].image.alt).toBe(imgTags[0].alt);\n      expect(Data.paragraphs[1].image.alt).toBe(imgTags[1].alt);\n      expect(pTags[0].text).toBe(Data.paragraphs[0].textContent);\n      expect(pTags[1].text).toBe(Data.paragraphs[1].textContent);\n    });\n    "]},"metadata":{},"sourceType":"module"}